/*
 * Copyright (C) 2007 Luca Veltri - University of Parma - Italy
 * 
 * This source code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This source code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this source code; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * Author(s):
 * Luca Veltri (luca.veltri@unipr.it)
 */

package local.ua;



import local.media.MediaDesc;
import org.zoolu.sip.address.NameAddress;
import org.zoolu.sip.provider.SipStack;
import org.zoolu.sip.provider.SipProvider;



/** Echo is a simple UA that loops back media streams.
  * It automatically responds to incoming calls and sends back
  * the received RTP streams.
  */
public class Echo extends MultipleUAS
{           

   /** Default available ports */
   public static int MEDIA_PORTS=40;

   /** Maximum life time (call duration) in seconds */
   public static int MAX_LIFE_TIME=600;

   /** First available media port */
   int first_media_port;
   /** Last available media port */
   int last_media_port;



   /** Creates a new Echo. */
   public Echo(SipProvider sip_provider, UserAgentProfile ua_profile, int media_ports)
   {  super(sip_provider,ua_profile);
      first_media_port=ua_profile.audio_port;
      last_media_port=first_media_port+media_ports-1;
   } 


   /** From UserAgentListener. When a new call is incoming. */
   public void onUaIncomingCall(UserAgent ua, NameAddress callee, NameAddress caller, MediaDesc[] media_descs)
   {  ua.accept();
      // set a new media port for next call
      if ((++ua_profile.audio_port)>last_media_port)
      {  ua_profile.audio_port=first_media_port;
         ua_profile.video_port-=(last_media_port-first_media_port);
      }
   }
   

   /** Prints out a message to stantard output. */
   void printOut(String str)
   {  if (stdout!=null) stdout.println(str);
   }


   /** The main method. */
   public static void main(String[] args)
   {         
      System.out.println("Echo "+SipStack.version);
      SipStack.debug_level=8;

      int media_ports=MEDIA_PORTS;

      for (int i=0; i<args.length; i++)
      {  if (args[i].equals("--mports"))
         {  try
            {  media_ports=Integer.parseInt(args[i+1]);
               args[i]="--skip";
               args[++i]="--skip";
            }
            catch (Exception e) {  e.printStackTrace();  }
         }
      }
      if (!UA.init("Echo",args))
      {  UA.printOut("   --mports            number of available media ports");
         return;
      }
      // else
      UA.ua_profile.audio=true;
      UA.ua_profile.video=true;
      UA.ua_profile.loopback=true;
      UA.ua_profile.send_only=false;
      UA.ua_profile.video_port=UA.ua_profile.audio_port+1;
      if (UA.ua_profile.hangup_time<=0) UA.ua_profile.hangup_time=MAX_LIFE_TIME;
      new Echo(UA.sip_provider,UA.ua_profile,media_ports);
   }    

}
